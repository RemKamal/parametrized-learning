/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "TMVAWrapper.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 


#include <cstdlib>
#include <vector>
#include <iostream>
#include <map>
#include <string>

#include "TFile.h"
#include "TNtuple.h"
#include "TTree.h"
#include "TString.h"
#include "TSystem.h"
#include "TROOT.h"
#include "TStopwatch.h"

#if not defined(__CINT__) || defined(__MAKECINT__)
#include "TMVA/Tools.h"
#include "TMVA/Reader.h"
#endif

//using namespace TMVA;


ClassImp(TMVAWrapper) 

 TMVAWrapper::TMVAWrapper(const char *name, const char *title, 
                        RooAbsReal& _features) :
   RooAbsReal(name,title), 
   features("features","features",this,_features)
 { 

   TMVA::Tools::Instance();
   reader = new TMVA::Reader( "!Color:!Silent" );    

   // Create a set of variables and declare them to the reader
   // - the variable names MUST corresponds in name and type to those given in the weight file(s) used
   reader->AddVariable( "x", &x);
   reader->AddVariable( "alpha", &alpha);

   // --- Book the MVA methods

   TString dir    = "weights/";
   TString prefix = "TMVARegression";

   // Book method(s)
   TString methodName = "MLP method";
   const TString weightfile = "TMVARegression_alphavary.root_MLP.weights.xml";
   reader->BookMVA( methodName, weightfile ); 
 } 


 TMVAWrapper::TMVAWrapper(const TMVAWrapper& other, const char* name) :  
   RooAbsReal(other,name), 
   features("features",this,other.features)
 { 
   TMVA::Tools::Instance();
   reader = new TMVA::Reader( "!Color:!Silent" );    
      // Create a set of variables and declare them to the reader
   // - the variable names MUST corresponds in name and type to those given in the weight file(s) used
   reader->AddVariable( "x", &x);
   reader->AddVariable( "alpha", &alpha);

   // --- Book the MVA methods

   TString dir    = "weights/";
   TString prefix = "TMVARegression";

   // Book method(s)
   TString methodName = "MLP method";
   const TString weightfile = "TMVARegression_alphavary.root_MLP.weights.xml";
   reader->BookMVA( methodName, weightfile ); 

 } 



 Double_t TMVAWrapper::evaluate() const 
 { 

   x = features.arg().getVal();
   Float_t val = (reader->EvaluateRegression("MLP method"))[0];


   return val ; 
 } 

